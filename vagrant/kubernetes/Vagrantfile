# coding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.require_version ">= 1.7.4"

KUBERNETES_VERSION = ENV["KUBERNETES_VERSION"] || "1.3.4"

# for running the CD Pipeline we recommend at least 8000 for memory!
$vmMemory = Integer(ENV['FABRIC8_VM_MEMORY'] || 8192)
$runApp = ENV['FABRIC8_APP']

$provisionScript = <<SCRIPT

export K8S_VERSION="v#{KUBERNETES_VERSION}"
export KUBECTL_VERSION="v#{KUBERNETES_VERSION}"

export RUN_APP="#{$runApp}"
APP_PARAM="--app=${RUN_APP}"
if [ "$RUN_APP" == "" ];then
  APP_PARAM=""
fi

# Check memory
VM_MEMORY="#{$vmMemory}"
echo "=========================================================================="
echo "Running Fabric8 App: ${RUN_APP} - to configure it set the environment variable FABRIC8_APP"
echo "Using gofabric8 parameter ${APP_PARAM}"
echo ""
echo "Using VM Memory of ${VM_MEMORY} MB"
if [ ${VM_MEMORY} -lt 8192 ]; then
  echo "NOTE: We recommend at least 8192 MB for running the 'cd-pipeline'."
  echo "      You can specify this with an environment variable FABRIC8_VM_MEMORY"
  echo "      E.g. when creating the VM with : 'FABRIC8_VM_MEMORY=8192 vagrant up'"
fi
echo "=========================================================================="

curl -Lo /usr/bin/kubectl http://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
if [ $? -ne 0 ]; then
    echo "Cannot download Kubernetes client from the internet. Check your connectivity and firewall or retry later."
    exit -1
fi

chmod 755 /usr/bin/kubectl

cp /vagrant/bin/* /usr/bin
chmod 775 /usr/bin/restart-kubernetes
chmod 775 /usr/bin/start-kubernetes

mkdir -p /var/lib/kubelet
mount -o bind /var/lib/kubelet /var/lib/kubelet
mount --make-shared /var/lib/kubelet

/usr/bin/start-kubernetes

cat <<EOT

Testing kubernetes
==================
You can test kubernetes is running via:

  curl -L http://172.28.128.80:8080/version


To setup kubectl on your host:
=============================

kubectl config set-cluster local --server=http://172.28.128.80:8080
kubectl config set-context local
kubectl config use-context local
kubectl get pods


Now downloading gofabric8...

EOT

# ========================
GOFABRIC8_VERSION="0.4.35"
# ========================

mkdir -p /tmp/gofabric8-download
cd /tmp/gofabric8-download
curl --retry 999 --retry-max-time 0 -sSL https://github.com/fabric8io/gofabric8/releases/download/v${GOFABRIC8_VERSION}/gofabric8-${GOFABRIC8_VERSION}-linux-amd64.tar.gz | tar xzv
chmod +x gofabric8
sudo mv gofabric8 /usr/bin

echo "Using gofabric8 to deploy fabric8 on kubernetes"

kubectl get pods


gofabric8 -s http://172.28.128.80:8080 deploy -y ${APP_PARAM}
gofabric8 -s http://172.28.128.80:8080 secrets -y
gofabric8 -s http://172.28.128.80:8080 volume -y --host-path="/vagrant/fabric8-data"

echo ""
echo "Waiting for the fabric8 console to start..."

until kubectl get pods -l project=console,provider=fabric8  | grep -m 1 "Running"; do sleep 1 ; done


cat <<EOT

fabric8 console
===============

You can now open the fabric8 console at:

  http://172.28.128.80:8080/api/v1/proxy/namespaces/default/services/fabric8/


Now to use the kubectl command line tool type:

kubectl config set-cluster local --server=http://172.28.128.80:8080
kubectl config set-context local --cluster local
kubectl config use-context local
kubectl get pods

export KUBERNETES_MASTER=http://172.28.128.80:8080
export DOCKER_HOST=tcp://172.28.128.80:2375
unset DOCKER_TLS_VERIFY
unset DOCKER_CERT_PATH


If you ever find kubernetes apiserver or kubelet fails you can usually docker restart the container.

To restart all the docker containers you can run:

  restart-kubernetes

which will delete all docker containers and restart kubernetes; which should restart all the pods from kubernetes too.

EOT

SCRIPT

$windows = (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil

$pluginToCheck = $windows ? "vagrant-hostmanager" : "landrush"
unless Vagrant.has_plugin?($pluginToCheck)
  raise 'Please type this command then try again: vagrant plugin install ' + $pluginToCheck
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Top level domain
  $tld = "k8s"

  # Landrush is used together with wildcard dns entries to map all
  # routes to the proper services
  if $windows
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    config.hostmanager.aliases = %w(fabric8.vagrant.k8s jenkins.vagrant.k8s gogs.vagrant.k8s nexus.vagrant.k8s hubot-web-hook.vagrant.k8s letschat.vagrant.k8s kibana.vagrant.k8s taiga.vagrant.k8s fabric8-forge.vagrant.k8s)
  else
    config.landrush.enabled = true
    config.landrush.tld = $tld
    config.landrush.host_ip_address = '172.28.128.80'
  end

  config.vm.box = "centos-7.1"
#  config.vm.box_version = "= 1.3.1"

  config.vm.network "private_network", ip: "172.28.128.80"

  config.vm.hostname = "vagrant." + $tld

  config.vm.provider "virtualbox" do |v|
    v.memory = $vmMemory
    v.cpus = 2
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  config.vm.provider :libvirt do |v, override|
    v.cpus = 2
    v.memory = $vmMemory

    override.vm.allowed_synced_folder_types = [:nfs, :rsync]
  end

  config.vm.provision "shell", inline: $provisionScript, keep_color: true

end
