# coding: utf-8
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.require_version ">= 1.7.4"

$provisionScript = <<SCRIPT

echo "Creating a cert"
mkdir -p /srv/kubernetes

cd /srv/kubernetes

export DNS_REPLICAS="1"
export DNS_DOMAIN="cluster.local"
export DNS_SERVER_IP="10.10.10.10"
export ENABLE_CLUSTER_DNS="true"
#export DNS_DOMAIN="vagrant.k8s"

export MASTER_NAME=server
export primary_cn=rht
export service_ip=172.28.128.80
export sans="${sans}IP:${service_ip},DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.${DNS_DOMAIN},DNS:${MASTER_NAME}"
export KUBE_ROOT=/vagrant/kubernetes


mkdir tmp
cd tmp
curl -L -O --connect-timeout 20 --retry 6 --retry-delay 2 https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz
tar xzf easy-rsa.tar.gz
cd easy-rsa-master/easyrsa3
./easyrsa init-pki
./easyrsa --batch "--req-cn=${primary_cn}@$(date +%s)" build-ca nopass
./easyrsa --subject-alt-name="${sans}" build-server-full "${MASTER_NAME}" nopass
./easyrsa build-client-full kubelet nopass
./easyrsa build-client-full kubecfg nopass

cp ./pki/ca.crt /srv/kubernetes
cp ./pki/private/* /srv/kubernetes
cp ./pki/issued/server.crt /srv/kubernetes/server.cert
cp ./pki/issued/kubelet.crt /srv/kubernetes/kubelet.cert
cp ./pki/issued/kubecfg.crt /srv/kubernetes/kubecfg.cert


echo "installing git and etcd"
yum -y install etcd git

mkdir -p ~/kubedistro
cd ~/kubedistro

# TODO check if the folder exists, if not download and unpack the distro...
tar xf /vagrant/kubernetes/server/kubernetes-server-linux-amd64.tar.gz

mkdir -p /opt/kubernetes/bin/
mkdir -p /opt/kubernetes/cfg/

cp -u /bin/etcd /opt/kubernetes/bin
cp -ru kubernetes/server/bin/* /opt/kubernetes/bin
cp -ru kubernetes/server/bin/* /usr/bin

echo "Lets create a cert"

echo "OK now lets run stuff!"

mkdir -p ~/kube-scripts
cd ~/kube-scripts

cp -ru /vagrant/kubernetes/cluster/centos/master/scripts/* .
cp -ru /vagrant/kubernetes/cluster/centos/node/scripts/* .
cp -ru ${KUBE_ROOT}/cluster/addons/dns/skydns-rc.yaml.in skydns-rc.yaml
cp -ru ${KUBE_ROOT}/cluster/addons/dns/skydns-svc.yaml.in skydns-svc.yaml

# lets tweak the scripts a little...
# lets enable priv containers
sed -i 's|^KUBE_ALLOW_PRIV.*|KUBE_ALLOW_PRIV="--allow-privileged=true"|' ./apiserver.sh
sed -i 's|^KUBE_ALLOW_PRIV.*|KUBE_ALLOW_PRIV="--allow-privileged=true"|' ./kubelet.sh

# lets setup DNS
sed -i "s|{{ pillar.*dns_replicas.* }}|${DNS_REPLICAS}|" ./skydns-rc.yaml
sed -i "s|{{ pillar.*dns_domain.* }}|${DNS_DOMAIN}|" ./skydns-rc.yaml
sed -i "s|{{ pillar.*dns_server.* }}|${DNS_SERVER_IP}|" ./skydns-svc.yaml

echo "Should have updated the replicas in the skydns-rc.yaml now...."
grep replicas ./skydns-rc.yaml


./etcd.sh
./apiserver.sh 172.28.128.80 http://localhost:4001
./controller-manager.sh 172.28.128.80
./scheduler.sh 172.28.128.80

./kubelet.sh 172.28.128.80 172.28.128.80
./proxy.sh 172.28.128.80 172.28.128.80

echo "waiting 5s for service start"
sleep 5

echo `systemctl list-units -t service`

echo "Testing api server with curl http://172.28.128.80:8080/version"
echo `curl http://172.28.128.80:8080/version`

mkdir -p ~/.kube
cat << EOT > ~/.kube/config
apiVersion: v1
clusters:
- cluster:
    server: http://172.28.128.80:8080
  name: local
contexts:
- context:
    cluster: "local"
    user: ""
  name: local
current-context: local
kind: Config
preferences: {}
users: []
EOT


echo "Creating SkyDNS"

kubectl create namespace kube-system
kubectl --namespace=kube-system create -f skydns-rc.yaml
kubectl --namespace=kube-system create -f skydns-svc.yaml


cat <<EOT


Testing kubernetes
==================
You can test kubernetes is running via:

  curl -L http://172.28.128.80:8080/version


To setup kubectl on your host:
=============================

kubectl config set-cluster local --server=http://172.28.128.80:8080
kubectl config set-context local
kubectl config use-context local
kubectl get pods


Now downloading gofabric8...

EOT


mkdir -p /tmp/gofabric8-download
cd /tmp/gofabric8-download
curl --retry 999 --retry-max-time 0 -sSL https://github.com/fabric8io/gofabric8/releases/download/v0.4.8/gofabric8-0.4.8-linux-amd64.tar.gz | tar xzv
chmod +x gofabric8
sudo mv gofabric8 /usr/bin

echo "Using gofabric8 to deploy fabric8 on kubernetes"

kubectl get pods

gofabric8 -s http://172.28.128.80:8080 deploy -y
gofabric8 -s http://172.28.128.80:8080 secrets -y
gofabric8 -s http://172.28.128.80:8080 volume -y --host-path="/vagrant/fabric8-data"


# TODO as a workaround for gofabric8 secrets not yet working on k8s lets create some
echo "Manually creating some secrets for Jenkins for now until gofabric8 secrets works properly on kubernetes!"
kubectl create secret generic jenkins-release-gpg
kubectl create secret generic jenkins-git-ssh
kubectl create secret generic jenkins-master-ssh
kubectl create secret generic jenkins-docker-cfg

echo ""
echo "Waiting for the fabric8 console to start..."

until kubectl get pods -l project=console,provider=fabric8  | grep -m 1 "Running"; do sleep 1 ; done


cat <<EOT

fabric8 console
===============

You can now open the fabric8 console at:

  http://172.28.128.80:8080/api/v1/proxy/namespaces/default/services/fabric8/


Now to use the kubectl command line tool type:

kubectl config set-cluster local --server=http://172.28.128.80:8080
kubectl config set-context local
kubectl config use-context local
kubectl get pods

export KUBERNETES_MASTER=http://172.28.128.80:8080
export DOCKER_HOST=tcp://172.28.128.80:2375
unset DOCKER_TLS_VERIFY
unset DOCKER_CERT_PATH

EOT

SCRIPT

$windows = (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil

if $windows && Vagrant.has_plugin?("vagrant-hostmanager")
  raise 'Conflicting vagrant plugin detected - please uninstall & then try again: vagrant plugin uninstall vagrant-hostmanager'
end
$pluginToCheck = $windows ? "vagrant-hostmanager-fabric8" : "landrush"
unless Vagrant.has_plugin?($pluginToCheck)
  raise 'Please type this command then try again: vagrant plugin install ' + $pluginToCheck
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Top level domain
  $tld = "k8s"

  # Landrush is used together with wildcard dns entries to map all
  # routes to the proper services
  if $windows
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    config.hostmanager.aliases = %w(fabric8.vagrant.k8s jenkins.vagrant.k8s gogs.vagrant.k8s nexus.vagrant.k8s hubot-web-hook.vagrant.k8s letschat.vagrant.k8s kibana.vagrant.k8s taiga.vagrant.k8s fabric8-forge.vagrant.k8s)
  else
    config.landrush.enabled = true
    config.landrush.tld = $tld
    config.landrush.host_ip_address = '172.28.128.80'
  end

  config.vm.box = "jimmidyson/centos-7.1"
  config.vm.box_version = "= 1.3.1"

  config.vm.network "private_network", ip: "172.28.128.80"

  config.vm.hostname = "vagrant." + $tld

  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
    v.cpus = 2
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end

  config.vm.provider :libvirt do |v|
    v.cpus = 2
    v.memory = 4096
  end

  config.vm.provision "shell", inline: $provisionScript, keep_color: true

end
